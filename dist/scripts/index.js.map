{
  "version": 3,
  "sources": ["../../source/scripts/views/View.ts", "../../source/scripts/views/taskView.ts", "../../source/scripts/views/addTaskView.ts", "../../source/scripts/data/state.ts", "../../source/scripts/config.ts", "../../source/scripts/helpers/timeout.ts", "../../source/scripts/helpers/getJSON.ts", "../../source/scripts/models/task.ts", "../../source/scripts/controllers/tasksController.ts", "../../source/scripts/index.ts"],
  "sourcesContent": ["export default abstract class View {\r\n    protected data: any;\r\n    protected parentElement: Element | null = null;\r\n\r\n    public render(data: any) {\r\n        if (!data) return console.log('No data');\r\n\r\n        this.data = data;\r\n        this.clear(); // Cleans up before rendering new tasks\r\n        \r\n        // Render new tasks\r\n        data.forEach(element => {\r\n            const markup = this.generateMarkup(element);\r\n            this.parentElement?.insertAdjacentHTML('beforeend', markup);\r\n        });\r\n    }\r\n\r\n    protected clear() {\r\n        this.clearSpinner();\r\n        if (this.parentElement) this.parentElement.innerHTML = ''; // Clears the contents of the table\r\n    }\r\n\r\n    public renderSpinner() {\r\n        const markup = `<div class=\"loader\"></div>`;\r\n        this.parentElement?.insertAdjacentHTML('beforebegin', markup); // Insert before parentElement\r\n    }\r\n\r\n    protected clearSpinner() {\r\n        const loader = document.querySelector('.loader');\r\n        if (loader) loader.remove(); // Remove loader\r\n    }\r\n\r\n    protected abstract generateMarkup(element: any): string;\r\n}\r\n", "import View from \"./View\";\r\n\r\nclass TaskView extends View {\r\n    protected parentElement = document.querySelector('.tbody');\r\n\r\n    protected generateMarkup(element): string {\r\n        return `\r\n            <tr>\r\n                <td data-label=\"Title\">${element.title}</td>\r\n                <td data-label=\"Status\">${element.status}</td>\r\n                <td data-label=\"Description\">${element.description}</td>\r\n                <td data-label=\"Action\">\r\n                    <button data-id=\"${element.id}\" class=\"action-button button edit\">\u270F\uFE0F</button>\r\n                    <button data-id=\"${element.id}\" class=\"action-button button delete\">\uD83D\uDDD1\uFE0F</button>\r\n                </td>\r\n            </tr>\r\n        `;\r\n    }\r\n\r\n    public override renderSpinner() {\r\n        const markup = `\r\n            <div class=\"loader\"></div>\r\n        `;\r\n\r\n        document.querySelector('.task-table')?.insertAdjacentHTML('afterend', markup);\r\n    }\r\n\r\n    public addHandlerRender(handler) {\r\n        const buttons = document.querySelectorAll('.aside__button');\r\n\r\n        buttons.forEach(button => {\r\n            button.addEventListener('click', function() {\r\n                const status = this.dataset.status;\r\n                handler(status);\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport default new TaskView();\r\n", "import View from \"./View\";\r\n\r\nclass AddTaskView extends View {\r\n    private form = document.querySelector('.form');\r\n    private blurContainer = document.querySelector('.blur');\r\n    private closeFormBtn = document.querySelector('.close-button');\r\n\r\n    protected generateMarkup(element: any): string {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    public renderForm() {\r\n        this.form?.classList.toggle('hidden');\r\n        this.blurContainer?.classList.toggle('hidden');\r\n    }\r\n\r\n    public addEventHandlers(handler) {\r\n        // Add task button\r\n        const button = document.querySelector('.data-container__button');\r\n        button?.addEventListener('click', handler);\r\n\r\n        // Loading close form events\r\n        this.closeFormEvents();\r\n    }\r\n\r\n    private closeFormEvents() {\r\n        this.blurContainer?.addEventListener('click', () => {\r\n            this.toggleForm();\r\n        });\r\n\r\n        document.addEventListener('keydown', (event) => {\r\n            if (event.key === 'Escape' && !this.form?.classList.contains('hidden')) {\r\n                this.toggleForm();\r\n            }\r\n        });\r\n\r\n        this.closeFormBtn?.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n\r\n            this.toggleForm();\r\n        });\r\n    }\r\n\r\n    private toggleForm() {\r\n        this.form?.classList.toggle('hidden');\r\n        this.blurContainer?.classList.toggle('hidden');\r\n    }\r\n}\r\n\r\nexport default new AddTaskView();\r\n", "import { Task } from \"../models/task\";\r\n\r\n// Interface that defines the state of the application\r\ninterface State {\r\n    tasks: Task[];\r\n}\r\n\r\n// Inicializing the state with an empty array of tasks\r\nexport const state: State = {\r\n    tasks: []\r\n};\r\n", "export const API_URL =  'https://localhost:7244/api/tasks';\r\n\r\nexport const TIMEOUT_SEC = 10;\r\nexport const RESULTS_PER_PAGE = 10;\r\n", "export const timeout = function (s) {\r\n    return new Promise(function (_, reject) {\r\n      setTimeout(function () {\r\n        reject(new Error(`Request took too long! Timeout after ${s} seconds`));\r\n      }, s * 1000);\r\n    });\r\n};\r\n", "import { TIMEOUT_SEC } from \"../config\";\r\nimport { timeout } from './timeout';\r\n\r\nexport const getJSON = async function(url) {\r\n    try {\r\n        // Grabbing the response from the API\r\n        // Race (timeout)\r\n        const result = await Promise.race([fetch(url), timeout(TIMEOUT_SEC)]);\r\n\r\n        if (!(result instanceof Response)) throw new Error('Request timed out or failed');\r\n\r\n        const response: Response = result;\r\n\r\n        // JSON parse\r\n        const data = await response.json();\r\n\r\n        if (!response.ok) throw new Error(`${response.status}`);\r\n\r\n        return data;\r\n\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n", "import { API_URL } from \"../config\";\r\nimport { state } from \"../data/state\";\r\nimport { getJSON } from \"../helpers/getJSON\";\r\n\r\nexport class Task {\r\n    public id: string;\r\n    public title: string;\r\n    public description: string;\r\n    public status: string;\r\n\r\n    constructor(id: string, title: string, description: string, status: string) {\r\n        this.id = id;\r\n        this.description = description;\r\n        this.title = title;\r\n        this.status = status;\r\n    }\r\n}\r\n\r\nexport const loadTasks = async function(): Promise<void> {\r\n    try {\r\n        // Get data\r\n        const data = await getJSON(`${API_URL}`);\r\n\r\n        // Converting the response into an Task array object\r\n        state.tasks = data.map((element: any) => new Task(\r\n            element.id,\r\n            element.title,\r\n            element.description,\r\n            element.status\r\n        ));\r\n\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const getTasks = function(status = '') {\r\n    if (status === 'Pending') {\r\n        return state.tasks.filter(t => t.status === 'Pending');\r\n    } else if (status === 'Completed') {\r\n        return state.tasks.filter(t => t.status === 'Completed');\r\n    }\r\n    return state.tasks;\r\n};\r\n", "import taskView from '../views/taskView';\r\nimport addTaskView from '../views/addTaskView';\r\n\r\nimport { state } from '../data/state';\r\nimport * as task from '../models/task';\r\n\r\nconst controlTasks = async function(status = '') {\r\n    try {\r\n        taskView.renderSpinner();\r\n\r\n        // Load tasks if state is not loaded\r\n        if (state.tasks.length < 1) await task.loadTasks();\r\n\r\n        // 1) Rendering tasks based on the status\r\n        taskView.render(task.getTasks(status));\r\n\r\n    } catch (error) {\r\n        console.error(\"Error loading tasks: \", error);\r\n    }\r\n}\r\n\r\nconst controlAddTask = async function() {\r\n    try {\r\n        // 1) Rendering form\r\n        addTaskView.renderForm();\r\n\r\n        // 2) Get form params\r\n\r\n        // 3) Send post request to the api\r\n\r\n    } catch (error) {\r\n        console.error(\"Error loading tasks: \", error);\r\n    }\r\n}\r\n\r\nexport const init = async function() {\r\n    // Rendering tasks on page load\r\n    controlTasks();\r\n\r\n    // Rendering quests from button events\r\n    taskView.addHandlerRender(controlTasks);\r\n\r\n    // Rendering form from button event\r\n    addTaskView.addEventHandlers(controlAddTask);\r\n}\r\n", "import { init } from \"./controllers/tasksController\";\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    init();\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
